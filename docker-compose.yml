version: "3.9"
services:
  postgres:
    container_name: postgres_weatherapp_container
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - ./pgdata:/data/postgres
    ports:
      - "5432:${POSTGRES_PORT}"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin_weatherapp_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_HOST_PORT:-5050}:80"
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  web:
    container_name: web_weatherapp_container
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./src/alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
networks:
  app-network:
    driver: bridge

volumes:
  postgres:
  pgadmin:
